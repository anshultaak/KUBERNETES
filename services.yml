CLUSTER IP
# you cannot cluster ip outside cluster 
kubectl expose pod pod_name --port=8080 --target-port=80 --name my_first_service    # 8080 is pod port and svc port 80 

NODE IP
# you can access oustide cluster by interenet
kubectl expose pod pod_name --type=NodePort --port=8000 --target-port=30087 --name my_first_service    # 8000 is pod port and svc port 30087

#access pod with differnt namespace
first go on inside container
curl service_name.namespace_name.svc.cluster.local

yaml file
apiVersion: V1
kind: Service
metadata:
  name: myfirstservice
  labels: 
    servicelable: labelname
spec:
  type: NodePort
  ports:
    - nodePort: 32000                          
      port: 9000
      targetPort: 80
  selector:
    type: app                                         # same label give to pod
    
# reuest came on 32000 redirect 9000 and last go rdirect on port 80

Multi-Port Services

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9376
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9377
      
 LOAD BALANCER FOR KUBERNTES

# create load balancer deployment by command
kubectl expose deployment name_deploment --type LoadBalancer --port=8000 --target-port=30087 --name my_first_service    # 8000 is pod port and svc port 30087

apiVersion: v1
kind: Service
metadata:
  name: example-service
spec:
  selector:
    app: example
  ports:
    - port: 8765
      targetPort: 9376
  type: LoadBalancer


INGRESS

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-wildcard-host
spec:
  rules:
  - host: "foo.bar.com"                     #internet use this link
    http:
      paths:
      - pathType: Prefix
        path: "/bar"
        backend:
          service:
            name: service1                          # name of service
            port:
              number: 80                             # port on whch service running
  - host: "*.foo.com"
    http:
      paths:
      - pathType: Prefix
        path: "/foo"
        backend:
          service:
            name: service2
            port:
              number: 80

INGRESS WITH TLS CERTIFCATE

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minimal-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx-example
  rules:
    tls:
    - hosts:
      - myapp.com
      secretName: myapp-secret-tls                                           # secret name
  - http:
      paths:
      - path: /testpath
        pathType: Prefix
        backend:
          service:
            name: test
            port:
              number: 80
